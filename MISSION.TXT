What we want: A more efficient/robust serialization scheme for PyMVPA
=====================================================================

design principles:
------------------
(1) more (use of) Parameter class, less private attributes
(2) save only those values that actually differ from defaults
(3) start coding on the highest possible abstraction layer

first shots:
------------
classes: FlattenMapper, BoxcarMapper
abstraction layer: Node
(handled) collections: ParameterCollection


*******
Ad (1): the chain reads: 
  FlattenMapper/BoxcarMapper --> Mapper --> Learner --> Node

FlattenMapper:  origshape = Parameter( (), constraints=EnsureTupleOf(int)) 
                maxdims = Parameter(None, constraints=EnsureNone() | EnsureInt())

Mapper:  ??? self._sa_filter = None
         ??? self._fa_filter = None
         ??? self._a_filter = None

Learner:  auto_train = Parameter(False, constraints='bool',
                                        doc="Whether the Learner performs automatic" 
                                        " training when called untrained.")
          force_train = Parameter(False, constraints='bool',
                                        doc="Whether the Learner enforces training" 
                                        " upon every call.")
          ??? self.__is_trained

Node:  ??? self.__postproc
       ??? self.__space

Ad (2),(3):
  Node.__reduce__(), as of this moment, reads:
  
    def __reduce__(self):
        cwc = ClassWithCollections.__reduce__(self)
        if hasattr(self, 'params'):
            default_keys = [key for key in self.params 
                                    if key not in self.params.which_set()]
            for key in default_keys:
                del cwc[2]['params'][key]
        return cwc

TODO NEXT: change it in such a way that at time of unpickling a
           default version is restored which then gets populated
           by the saved non-default sates 